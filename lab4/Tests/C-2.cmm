struct CalculationData {
    int input_value;
    int factorial_result;
};

struct ComputedResult {
    int gcd_result;
    int sum_result;
};

int computeFactorial(int number_input) {
    if (number_input == 1) {
        return 1;
    }
    return number_input * computeFactorial(number_input - 1);
}

int findGreatestCommonDivisor(int first_number, int second_number) {
    while (second_number != 0) {
        int temp_value = second_number;
        second_number = first_number - (first_number / second_number) * second_number;
        first_number = temp_value;
    }
    return first_number;
}

int computeArraySum(int num_array[5], int array_size) {
    int index_marker = 0;
    int total_sum = 0;
    while (index_marker < array_size) {
        total_sum = total_sum + num_array[index_marker];
        index_marker = index_marker + 1;
    }
    return total_sum;
}

struct ComputedResult processComputation(int first_input, int second_input, int values_list[5], int list_size) {
    struct ComputedResult final_results;
    final_results.gcd_result = findGreatestCommonDivisor(first_input, second_input);
    final_results.sum_result = computeArraySum(values_list, list_size);
    return final_results;
}

int main() {
    struct CalculationData factorial_info;
    struct ComputedResult computed_values;
    int num_series[3];
    int input_one, input_two, factorial_output, sum_total, gcd_output;
    int loop_counter;
    
    loop_counter = 0;
    while (loop_counter < 3) {
        num_series[loop_counter] = loop_counter + 2;
        loop_counter = loop_counter + 1;
    }

    input_one = num_series[0] + 5;
    input_two = num_series[1] + 3;

    factorial_info.input_value = input_one;
    factorial_info.factorial_result = computeFactorial(input_one);

    computed_values = processComputation(input_one, input_two, num_series, 3);
    
    sum_total = computed_values.sum_result;
    gcd_output = computed_values.gcd_result;
    
    if (factorial_info.factorial_result > sum_total) {
        return factorial_info.factorial_result;
    } else {
        if (gcd_output > sum_total) {
            return gcd_output;
        } else {
            return sum_total;
        }
    }
}
